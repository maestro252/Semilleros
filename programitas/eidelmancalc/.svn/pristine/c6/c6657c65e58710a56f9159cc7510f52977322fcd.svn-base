#!/usr/bin/ruby
require 'stringio'
require 'set'
$traducir = false
$ewe = ""
$interactivo = false
$negate = false
class Token
  attr_reader :type, :line, :col

  def initialize(type,lineNum,colNum)
    @type = type
    @line = lineNum
    @col = colNum
  end
end

class LexicalToken < Token
  attr_reader :lex
  
  def initialize(type,lex,lineNum,colNum)
    super(type,lineNum,colNum)
    
    @lex = lex
  end
end
      
class Scanner
  def initialize(inStream)
    @istream = inStream
    @keywords = Set.new(["S","R"])
    @lineCount = 1
    @colCount = -1
    @needToken = true
    @lastToken = nil
  end

  def putBackToken()
    @needToken = false
  end

  def getToken()
    if !@needToken
      @needToken = true
      return @lastToken
    end

    state = 0
    foundOne = false
    c = @istream.getc()

    if @istream.eof() then
      @lastToken = Token.new(:eof,@lineCount,@colCount)
      return @lastToken
    end

    while !foundOne
      @colCount = @colCount + 1
      case state
      when 0
        lex = ""
        column = @colCount
        line = @lineCount
        if isLetter(c) then state=1
        elsif isDigit(c) then state=2
        elsif c == ?+ then state = 3
        elsif c == ?- then state = 4
        elsif c == ?* then state = 5
        elsif c == ?/ then state = 6
        elsif c == ?( then state = 7
        elsif c == ?) then state = 8
        elsif c == ?% then state = 9 
        elsif c == ?\n then 
          @colCount = -1
          @lineCount = @lineCount+1
        elsif isWhiteSpace(c) then state = state 
        elsif @istream.eof() then
          @foundOne = true
          type = :eof
        else
          print "* " if $interactivo
          print "Unrecognized Token found at line ",line," and column ",column,"\n"
          raise "Unrecognized Token"
        end
      when 1
        if isLetter(c) or isDigit(c) then state = 1
        else
          if @keywords.include?(lex) then
            foundOne = true
            type = :keyword
          else
            foundOne = true
            type = :identifier
          end
        end
      when 2
        if isDigit(c) then state = 2
        else
          type = :number
          foundOne = true
        end
      when 3
        type = :add
        foundOne = true
      when 4
        type = :sub
        foundOne = true
      when 5
        type = :times
        foundOne = true
      when 6
        type = :divide
        foundOne = true
      when 7
        type = :lparen
        foundOne = true
      when 8
        type = :rparen
        foundOne = true
      
      when 9   
        type = :mod 
        foundOne = true
      end

      if !foundOne then
        lex.concat(c)
        c = @istream.getc()
      end

    end
    
    @istream.ungetc(c)   
    @colCount = @colCount - 1
    if type == :number or type == :identifier or type == :keyword then
      t = LexicalToken.new(type,lex,line,column)
    else
      t = Token.new(type,line,column)
    end

    @lastToken = t
    return t 
  end

  private
  def isLetter(c) 
    return ((?a <= c and c <= ?z) or (?A <= c and c <= ?Z))
  end

  def isDigit(c)
    return (?0 <= c and c <= ?9)
  end

  def isWhiteSpace(c)
    return (c == ?\  or c == ?\n or c == ?\t)
  end
end
      
class BinaryNode
  attr_reader :left, :right
    
  def initialize(left,right)
    @left = left
    @right = right
  end
end
   
class UnaryNode
  attr_reader :subTree
  
  def initialize(subTree)
    @subTree = subTree
  end
end

class StoreNode < UnaryNode
  def initialize(subTree)
    super(subTree)
  end
  def evaluate()
    if $traducir
      $ewe += "    sp := sp + uno\n"
    end
    $calc.memory = @subTree.evaluate()
    if $traducir
      $ewe += "    sp := sp - uno\n"
      $ewe += "    tmp := M[sp+1]\n"
      $ewe += "    M[sp+0] := tmp\n"
      $ewe += "    mem := tmp\n"
    end
    return $calc.memory
  end
end

class NegateNode < UnaryNode
  def initialize (subTree)
    super(subTree)
  end
  def evaluate()
    if $traducir
      $ewe += "    sp := sp + uno\n"
    end
    a =  (-1) * @subTree.evaluate()
    if $traducir
      $ewe += "    sp := sp - uno\n"
      $ewe += "    tmp := " + "M[sp+1]"  + "\n"
      $ewe += "    tmp2 := cero - uno\n"
      $ewe += "    tmp := tmp * tmp2\n"
      $ewe += "    M[sp+0] := tmp\n"
    end
    return a
  end
end

class AddNode < BinaryNode
  def initialize(left, right)
    super(left,right)
  end
  
  def evaluate()
    if $traducir
      $ewe += "    sp := sp + tres\n"
    end
    a = @left.evaluate()
    if $traducir  
      $ewe += "    sp := sp - tres\n"
      $ewe += "    tmp := M[sp+3]\n"
      $ewe += "    M[sp+1] := tmp\n"
      $ewe += "    sp := sp + tres\n"
    end
    b = @right.evaluate()
    if $traducir
      $ewe += "    sp := sp - tres\n"
      $ewe += "    tmp := M[sp+3]\n"
      $ewe += "    M[sp+2] := tmp\n"
      $ewe += "    tmp := M[sp+1]\n"
      $ewe += "    tmp2 := M[sp+2]\n"
      $ewe += "    tmp := tmp + tmp2\n"
      $ewe += "    M[sp+0] := tmp\n"
    end
    return a + b
  end
end


class ModNode < BinaryNode
  def initialize(left,right)
    super(left, right)
  end
  
  def evaluate()
     if $traducir
      $ewe += "    sp := sp + tres\n"
     end
    a = @left.evaluate()
    if $traducir  
      $ewe += "    sp := sp - tres\n"
      $ewe += "    tmp := M[sp+3]\n"
      $ewe += "    M[sp+1] := tmp\n"
      $ewe += "    sp := sp + tres\n"
    end
    b = @right.evaluate()
    if $traducir
      $ewe += "    sp := sp - tres\n"
      $ewe += "    tmp := M[sp+3]\n"
      $ewe += "    M[sp+2] := tmp\n"
      $ewe += "    tmp := M[sp+1]\n"
      $ewe += "    tmp2 := M[sp+2]\n"
      $ewe += "    tmp := tmp % tmp2\n"
      $ewe += "    M[sp+0] := tmp\n"
    end
    return a % b
  end

end

class SubNode < BinaryNode
  def initialize(left, right)
    super(left,right)
  end
  
  def evaluate()
    if $traducir
      $ewe += "    sp := sp + tres\n"
     end
    a = @left.evaluate()
    if $traducir  
      $ewe += "    sp := sp - tres\n"
      $ewe += "    tmp := M[sp+3]\n"
      $ewe += "    M[sp+1] := tmp\n"
      $ewe += "    sp := sp + tres\n"
    end
    b = @right.evaluate()
    if $traducir
      $ewe += "    sp := sp - tres\n"
      $ewe += "    tmp := M[sp+3]\n"
      $ewe += "    M[sp+2] := tmp\n"
      $ewe += "    tmp := M[sp+1]\n"
      $ewe += "    tmp2 := M[sp+2]\n"
      $ewe += "    tmp := tmp - tmp2\n"
      $ewe += "    M[sp+0] := tmp\n"
    end
    return (a - b)
  end
end

class MulNode < BinaryNode
  def initialize(left, right)
    super(left,right)
  end
  
  def evaluate() 
     if $traducir
      $ewe += "    sp := sp + tres\n"
     end
    a = @left.evaluate()
    if $traducir  
      $ewe += "    sp := sp - tres\n"
      $ewe += "    tmp := M[sp+3]\n"
      $ewe += "    M[sp+1] := tmp\n"
      $ewe += "    sp := sp + tres\n"
    end
    b = @right.evaluate()
    if $traducir
      $ewe += "    sp := sp - tres\n"
      $ewe += "    tmp := M[sp+3]\n"
      $ewe += "    M[sp+2] := tmp\n"
      $ewe += "    tmp := M[sp+1]\n"
      $ewe += "    tmp2 := M[sp+2]\n"
      $ewe += "    tmp := tmp * tmp2\n"
      $ewe += "    M[sp+0] := tmp\n"
    end
    return (a * b)
  end
end

class DivNode < BinaryNode
  def initialize(left, right)
    super(left,right)
  end
  
  def evaluate() 
     if $traducir
      $ewe += "    sp := sp + tres\n"
     end
    a = @left.evaluate()
    if $traducir  
      $ewe += "    sp := sp - tres\n"
      $ewe += "    tmp := M[sp+3]\n"
      $ewe += "    M[sp+1] := tmp\n"
      $ewe += "    sp := sp + tres\n"
    end
    b = @right.evaluate()
    if $traducir
      $ewe += "    sp := sp - tres\n"
      $ewe += "    tmp := M[sp+3]\n"
      $ewe += "    M[sp+2] := tmp\n"
      $ewe += "    tmp := M[sp+1]\n"
      $ewe += "    tmp2 := M[sp+2]\n"
      $ewe += "    tmp := tmp / tmp2\n"
      $ewe += "    M[sp+0] := tmp\n"
    end
    return (a / b)
  end
end
      
class NumNode 
  def initialize(num)
    @num = num
  end
  
  def evaluate() 
    if $traducir
      $ewe += "    tmp := " + @num + "\n"
      $ewe += "    M[sp+0] := tmp\n"
    end
    return @num.to_i
  end
end   

class RecallNode
  def evaluate()
    if $traducir
     $ewe += "    M[sp+0] := mem\n"
    end
    return $calc.memory
  end
end
      
class Parser
  def initialize(istream)
    @scan = Scanner.new(istream)
  end
  
  def parse()
    return Prog()
  end
  
  private
  def Prog()
    result = Expr()
    t = @scan.getToken()
    
    if t.type != :eof then
      print "* " if $interactivo
      print "Expected EOF. Found ", t.type, ".\n"
      raise "Parse Error"
    end
    
    return result
  end
  
  def Expr() 
    return RestExpr(Term())
  end
  
  def RestExpr(e) 
    t = @scan.getToken()
    
    if t.type == :add then
      return RestExpr(AddNode.new(e,Term()))
    end
    
    if t.type == :sub then
      return RestExpr(SubNode.new(e,Term()))
    end
    
    @scan.putBackToken()
    
    return e
  end
  
  def Term()
    return RestTerm(Storable())
  end
  
 
  def RestTerm(e)
    
    
    t = @scan.getToken()
    
    if t.type == :times then
      return RestTerm(MulNode.new(e,Storable()))
    end
    
    if t.type == :divide then
      return RestTerm(DivNode.new(e,Storable()))
    end
    
    if t.type == :mod then
      return RestTerm(ModNode.new(e,Storable()))
    end
    

    @scan.putBackToken()
    
    return e
  end

  def Storable()
    ret = Negate()
    t = @scan.getToken()
    if t.type == :keyword then
      if t.lex == "S" then
        ret = StoreNode.new(ret)
        return ret
      end
    end
    @scan.putBackToken()
    return ret
  end
  
  def Negate()
    t = @scan.getToken()
    if t.type == :sub
      return NegateNode.new(Factor())
    else
      @scan.putBackToken()
      return Factor()
    end
    #return Factor()
  end

  def Factor() 
    
    t = @scan.getToken()

    if t.type == :number then
      return NumNode.new(t.lex)
    end

    if t.type == :keyword then
      if t.lex == "R" then
        return RecallNode.new()
      end
    end

    if t.type == :lparen then
      ret = Expr()
      t = @scan.getToken()
      if t.type != :rparen then
        print "* " if $interactivo
        print "Expected ), found token " , t.type, "\n"
        raise "Parse error"
      end
      return ret
    end
    print "* " if $interactivo
    print "Expected number, R or ( found token " , t.type, "\n"
    raise "Parse error"
  end      
end

class Calculator
	attr_reader :memory
	attr_writer :memory
	
	def initialize()
	  @memory = 0
	end
	
	def eval(expr)
		parser = Parser.new(StringIO.new(expr))
		ast = parser.parse()
	   return ast.evaluate()
	end
end


#main
salir = ""
freno = false
if ARGV.size == 0
  option="no"
elsif ARGV.size == 1
  option=ARGV.shift
end
#main para interactivo
if option == "-i"
  $interactivo = true
  puts "MODO INTERACTIVO ------> ON"
  print "> "
  while text = gets
    if text.chomp == salir
    freno = true
    end
    break if freno
    begin
      $calc = Calculator.new()
      puts "= " + $calc.eval(text).to_s
      print "> "
    rescue
      print "> "
    end
  end

elsif option == "-c"
    $si = false
    $traducir = true;
    $ewe += "Start:\n"
    $ewe += "    sp := 7\n"
    $ewe += "    uno := 1\n"
    $ewe += "    tres := 3\n"
    $ewe += "    cero := 0\n"
    $ewe += "    sp := sp + uno\n"
    $archivo = File.new('a.ewe', 'w')
    puts "MODO COMPILADOR ------> ON"
    print "Enter a valid calculator expression: "
    text = gets
    begin
    $calc = Calculator.new()
    puts "The result is " + $calc.eval(text).to_s
    rescue
      #puts "Error de sintaxis o la expresion no es valida dentro de la gramatica"
    end
    $ewe += "    sp := sp - uno\n"
    $ewe += "    tmp := M[sp+1]\n"   
    $ewe += "    writeInt(tmp)\n"
    $ewe += "halt\n"
    $ewe += "equ tmp   M[0]\n"
    $ewe += "equ tmp2  M[1]\n"
    $ewe += "equ cero  M[2]\n"
    $ewe += "equ uno   M[3]\n"
    $ewe += "equ tres  M[4]\n"
    $ewe += "equ mem   M[5]\n"
    $ewe += "equ sp    M[6]\n"
    $ewe += "equ stack M[7]\n"
    $archivo.puts $ewe
    $archivo.close              
    
                                                  
    
end

if option == "no"
  
  print "Enter a valid calculator expression: "
  text = gets
  begin
  $calc = Calculator.new()
  puts "The result is " + $calc.eval(text).to_s
  rescue
   # puts "Error de sintaxis o la expresion no es valida dentro de la gramatica"
  end
end

if option != "no" and option != "-i" and option != "-c"

puts "Entre un parametro valido"

end




